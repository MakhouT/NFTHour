{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeProxyCall = exports.encodeTransferCall = exports.encodeAtomicizedTransfer = exports.encodeDefaultCall = exports.encodeBuy = exports.encodeAtomicizedBuy = exports.encodeAtomicizedSell = exports.encodeSell = exports.encodeCall = exports.encodeReplacementPattern = exports.AbiType = void 0;\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nvar ethABI = require(\"ethereumjs-abi\");\n\nvar wyvern_js_1 = require(\"wyvern-js\");\n\nvar types_1 = require(\"wyvern-schemas/dist/types\");\n\nvar wyvern_schemas_1 = require(\"wyvern-schemas\");\n\nObject.defineProperty(exports, \"AbiType\", {\n  enumerable: true,\n  get: function () {\n    return wyvern_schemas_1.AbiType;\n  }\n});\n\nvar types_2 = require(\"../types\");\n\nvar Proxy_1 = require(\"../abi/Proxy\");\n\nexports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;\n\nvar encodeCall = function (abi, parameters) {\n  var inputTypes = abi.inputs.map(function (i) {\n    return i.type;\n  });\n  return '0x' + Buffer.concat([ethABI.methodID(abi.name, inputTypes), ethABI.rawEncode(inputTypes, parameters)]).toString('hex');\n};\n\nexports.encodeCall = encodeCall;\n\nvar encodeSell = function (schema, asset, address) {\n  var transfer = schema.functions.transfer(asset);\n  return {\n    target: transfer.target,\n    calldata: exports.encodeDefaultCall(transfer, address),\n    replacementPattern: exports.encodeReplacementPattern(transfer)\n  };\n};\n\nexports.encodeSell = encodeSell;\n\nvar encodeAtomicizedSell = function (schemas, assets, address, wyvernProtocol, networkName) {\n  var atomicizer = wyvernProtocol.wyvernAtomicizer;\n\n  var _a = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, types_2.OrderSide.Sell),\n      atomicizedCalldata = _a.atomicizedCalldata,\n      atomicizedReplacementPattern = _a.atomicizedReplacementPattern;\n\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern,\n    target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)\n  };\n};\n\nexports.encodeAtomicizedSell = encodeAtomicizedSell;\n\nvar encodeAtomicizedBuy = function (schemas, assets, address, wyvernProtocol, networkName) {\n  var atomicizer = wyvernProtocol.wyvernAtomicizer;\n\n  var _a = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, types_2.OrderSide.Buy),\n      atomicizedCalldata = _a.atomicizedCalldata,\n      atomicizedReplacementPattern = _a.atomicizedReplacementPattern;\n\n  return {\n    calldata: atomicizedCalldata,\n    replacementPattern: atomicizedReplacementPattern,\n    target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)\n  };\n};\n\nexports.encodeAtomicizedBuy = encodeAtomicizedBuy;\n\nvar encodeBuy = function (schema, asset, address) {\n  var transfer = schema.functions.transfer(asset);\n  var replaceables = transfer.inputs.filter(function (i) {\n    return i.kind === types_1.FunctionInputKind.Replaceable;\n  });\n  var ownerInputs = transfer.inputs.filter(function (i) {\n    return i.kind === types_1.FunctionInputKind.Owner;\n  }); // Validate\n\n  if (replaceables.length !== 1) {\n    throw new Error('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\n  } // Compute calldata\n\n\n  var parameters = transfer.inputs.map(function (input) {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return address;\n\n      case types_1.FunctionInputKind.Owner:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n\n      default:\n        try {\n          return input.value.toString();\n        } catch (e) {\n          console.error(schema);\n          console.error(asset);\n          throw e;\n        }\n\n    }\n  });\n  var calldata = exports.encodeCall(transfer, parameters); // Compute replacement pattern\n\n  var replacementPattern = '0x';\n\n  if (ownerInputs.length > 0) {\n    replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);\n  }\n\n  return {\n    target: transfer.target,\n    calldata: calldata,\n    replacementPattern: replacementPattern\n  };\n};\n\nexports.encodeBuy = encodeBuy;\n\nvar encodeDefaultCall = function (abi, address) {\n  var parameters = abi.inputs.map(function (input) {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n\n      case types_1.FunctionInputKind.Owner:\n        return address;\n\n      case types_1.FunctionInputKind.Asset:\n      default:\n        return input.value;\n    }\n  });\n  return exports.encodeCall(abi, parameters);\n};\n\nexports.encodeDefaultCall = encodeDefaultCall;\n/**\n * Encode the atomicized transfer of many assets\n * @param schema Wyvern Schema for the assets\n * @param assets List of assets to transfer\n * @param from Current address owning the assets\n * @param to Destination address\n * @param atomicizer Wyvern Atomicizer instance\n */\n\nfunction encodeAtomicizedTransfer(schemas, assets, from, to, wyvernProtocol, networkName) {\n  var atomicizer = wyvernProtocol.wyvernAtomicizer;\n  var transactions = assets.map(function (asset, i) {\n    var schema = schemas[i];\n    var transfer = schema.functions.transfer(asset);\n    var calldata = encodeTransferCall(transfer, from, to);\n    return {\n      calldata: calldata,\n      address: transfer.target,\n      value: new bignumber_js_1.BigNumber(0)\n    };\n  });\n  var atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(function (t) {\n    return t.address;\n  }), transactions.map(function (t) {\n    return t.value;\n  }), transactions.map(function (t) {\n    return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2);\n  }), // subtract 2 for '0x', divide by 2 for hex\n  transactions.map(function (t) {\n    return t.calldata;\n  }).reduce(function (x, current) {\n    return x + current.slice(2);\n  }, '0x'));\n  return {\n    calldata: atomicizedCalldata,\n    target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)\n  };\n}\n\nexports.encodeAtomicizedTransfer = encodeAtomicizedTransfer;\n/**\n * Encode a transfer call for a Wyvern schema function\n * @param transferAbi Annotated Wyvern ABI\n * @param from From address\n * @param to To address\n */\n\nfunction encodeTransferCall(transferAbi, from, to) {\n  var parameters = transferAbi.inputs.map(function (input) {\n    switch (input.kind) {\n      case types_1.FunctionInputKind.Replaceable:\n        return to;\n\n      case types_1.FunctionInputKind.Owner:\n        return from;\n\n      case types_1.FunctionInputKind.Asset:\n      default:\n        if (input.value == null) {\n          throw new Error(\"Unsupported function input kind: \" + input.kind);\n        }\n\n        return input.value;\n    }\n  });\n  return exports.encodeCall(transferAbi, parameters);\n}\n\nexports.encodeTransferCall = encodeTransferCall;\n/**\n * Encode a call to a user's proxy contract\n * @param address The address for the proxy to call\n * @param howToCall How to call the addres\n * @param calldata The data to use in the call\n * @param shouldAssert Whether to assert success in the proxy call\n */\n\nfunction encodeProxyCall(address, howToCall, calldata, shouldAssert) {\n  if (shouldAssert === void 0) {\n    shouldAssert = true;\n  }\n\n  var abi = shouldAssert ? Proxy_1.proxyAssertABI : Proxy_1.proxyABI;\n  return exports.encodeCall(abi, [address, howToCall, Buffer.from(calldata.slice(2), 'hex')]);\n}\n\nexports.encodeProxyCall = encodeProxyCall; // Helpers for atomicizer\n\nfunction encodeAtomicizedCalldata(atomicizer, schemas, assets, address, side) {\n  var encoder = side === types_2.OrderSide.Sell ? exports.encodeSell : exports.encodeBuy;\n\n  try {\n    var transactions = assets.map(function (asset, i) {\n      var schema = schemas[i];\n\n      var _a = encoder(schema, asset, address),\n          target = _a.target,\n          calldata = _a.calldata;\n\n      return {\n        calldata: calldata,\n        abi: schema.functions.transfer(asset),\n        address: target,\n        value: new bignumber_js_1.BigNumber(0)\n      };\n    });\n    var atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(function (t) {\n      return t.address;\n    }), transactions.map(function (t) {\n      return t.value;\n    }), transactions.map(function (t) {\n      return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2);\n    }), // subtract 2 for '0x', divide by 2 for hex\n    transactions.map(function (t) {\n      return t.calldata;\n    }).reduce(function (x, y) {\n      return x + y.slice(2);\n    }));\n    var kind = side === types_2.OrderSide.Buy ? types_1.FunctionInputKind.Owner : undefined;\n    var atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(function (t) {\n      return t.abi;\n    }), kind);\n\n    if (!atomicizedCalldata || !atomicizedReplacementPattern) {\n      throw new Error(\"Invalid calldata: \" + atomicizedCalldata + \", \" + atomicizedReplacementPattern);\n    }\n\n    return {\n      atomicizedCalldata: atomicizedCalldata,\n      atomicizedReplacementPattern: atomicizedReplacementPattern\n    };\n  } catch (error) {\n    console.error({\n      schemas: schemas,\n      assets: assets,\n      address: address,\n      side: side\n    });\n    throw new Error(\"Failed to construct your order: likely something strange about this type of item. OpenSea has been notified. Please contact us in Discord! Original error: \" + error);\n  }\n}","map":{"version":3,"sources":["../../src/utils/schema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeProxyCall = exports.encodeTransferCall = exports.encodeAtomicizedTransfer = exports.encodeDefaultCall = exports.encodeBuy = exports.encodeAtomicizedBuy = exports.encodeAtomicizedSell = exports.encodeSell = exports.encodeCall = exports.encodeReplacementPattern = exports.AbiType = void 0;\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar ethABI = require(\"ethereumjs-abi\");\nvar wyvern_js_1 = require(\"wyvern-js\");\nvar types_1 = require(\"wyvern-schemas/dist/types\");\nvar wyvern_schemas_1 = require(\"wyvern-schemas\");\nObject.defineProperty(exports, \"AbiType\", { enumerable: true, get: function () { return wyvern_schemas_1.AbiType; } });\nvar types_2 = require(\"../types\");\nvar Proxy_1 = require(\"../abi/Proxy\");\nexports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;\nvar encodeCall = function (abi, parameters) {\n    var inputTypes = abi.inputs.map(function (i) { return i.type; });\n    return '0x' + Buffer.concat([\n        ethABI.methodID(abi.name, inputTypes),\n        ethABI.rawEncode(inputTypes, parameters),\n    ]).toString('hex');\n};\nexports.encodeCall = encodeCall;\nvar encodeSell = function (schema, asset, address) {\n    var transfer = schema.functions.transfer(asset);\n    return {\n        target: transfer.target,\n        calldata: exports.encodeDefaultCall(transfer, address),\n        replacementPattern: exports.encodeReplacementPattern(transfer),\n    };\n};\nexports.encodeSell = encodeSell;\nvar encodeAtomicizedSell = function (schemas, assets, address, wyvernProtocol, networkName) {\n    var atomicizer = wyvernProtocol.wyvernAtomicizer;\n    var _a = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, types_2.OrderSide.Sell), atomicizedCalldata = _a.atomicizedCalldata, atomicizedReplacementPattern = _a.atomicizedReplacementPattern;\n    return {\n        calldata: atomicizedCalldata,\n        replacementPattern: atomicizedReplacementPattern,\n        target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)\n    };\n};\nexports.encodeAtomicizedSell = encodeAtomicizedSell;\nvar encodeAtomicizedBuy = function (schemas, assets, address, wyvernProtocol, networkName) {\n    var atomicizer = wyvernProtocol.wyvernAtomicizer;\n    var _a = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, types_2.OrderSide.Buy), atomicizedCalldata = _a.atomicizedCalldata, atomicizedReplacementPattern = _a.atomicizedReplacementPattern;\n    return {\n        calldata: atomicizedCalldata,\n        replacementPattern: atomicizedReplacementPattern,\n        target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)\n    };\n};\nexports.encodeAtomicizedBuy = encodeAtomicizedBuy;\nvar encodeBuy = function (schema, asset, address) {\n    var transfer = schema.functions.transfer(asset);\n    var replaceables = transfer.inputs.filter(function (i) { return i.kind === types_1.FunctionInputKind.Replaceable; });\n    var ownerInputs = transfer.inputs.filter(function (i) { return i.kind === types_1.FunctionInputKind.Owner; });\n    // Validate\n    if (replaceables.length !== 1) {\n        throw new Error('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');\n    }\n    // Compute calldata\n    var parameters = transfer.inputs.map(function (input) {\n        switch (input.kind) {\n            case types_1.FunctionInputKind.Replaceable:\n                return address;\n            case types_1.FunctionInputKind.Owner:\n                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n            default:\n                try {\n                    return input.value.toString();\n                }\n                catch (e) {\n                    console.error(schema);\n                    console.error(asset);\n                    throw e;\n                }\n        }\n    });\n    var calldata = exports.encodeCall(transfer, parameters);\n    // Compute replacement pattern\n    var replacementPattern = '0x';\n    if (ownerInputs.length > 0) {\n        replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);\n    }\n    return {\n        target: transfer.target,\n        calldata: calldata,\n        replacementPattern: replacementPattern,\n    };\n};\nexports.encodeBuy = encodeBuy;\nvar encodeDefaultCall = function (abi, address) {\n    var parameters = abi.inputs.map(function (input) {\n        switch (input.kind) {\n            case types_1.FunctionInputKind.Replaceable:\n                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);\n            case types_1.FunctionInputKind.Owner:\n                return address;\n            case types_1.FunctionInputKind.Asset:\n            default:\n                return input.value;\n        }\n    });\n    return exports.encodeCall(abi, parameters);\n};\nexports.encodeDefaultCall = encodeDefaultCall;\n/**\n * Encode the atomicized transfer of many assets\n * @param schema Wyvern Schema for the assets\n * @param assets List of assets to transfer\n * @param from Current address owning the assets\n * @param to Destination address\n * @param atomicizer Wyvern Atomicizer instance\n */\nfunction encodeAtomicizedTransfer(schemas, assets, from, to, wyvernProtocol, networkName) {\n    var atomicizer = wyvernProtocol.wyvernAtomicizer;\n    var transactions = assets.map(function (asset, i) {\n        var schema = schemas[i];\n        var transfer = schema.functions.transfer(asset);\n        var calldata = encodeTransferCall(transfer, from, to);\n        return {\n            calldata: calldata,\n            address: transfer.target,\n            value: new bignumber_js_1.BigNumber(0),\n        };\n    });\n    var atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(function (t) { return t.address; }), transactions.map(function (t) { return t.value; }), transactions.map(function (t) { return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2); }), // subtract 2 for '0x', divide by 2 for hex\n    transactions.map(function (t) { return t.calldata; }).reduce(function (x, current) { return x + current.slice(2); }, '0x'));\n    return {\n        calldata: atomicizedCalldata,\n        target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)\n    };\n}\nexports.encodeAtomicizedTransfer = encodeAtomicizedTransfer;\n/**\n * Encode a transfer call for a Wyvern schema function\n * @param transferAbi Annotated Wyvern ABI\n * @param from From address\n * @param to To address\n */\nfunction encodeTransferCall(transferAbi, from, to) {\n    var parameters = transferAbi.inputs.map(function (input) {\n        switch (input.kind) {\n            case types_1.FunctionInputKind.Replaceable:\n                return to;\n            case types_1.FunctionInputKind.Owner:\n                return from;\n            case types_1.FunctionInputKind.Asset:\n            default:\n                if (input.value == null) {\n                    throw new Error(\"Unsupported function input kind: \" + input.kind);\n                }\n                return input.value;\n        }\n    });\n    return exports.encodeCall(transferAbi, parameters);\n}\nexports.encodeTransferCall = encodeTransferCall;\n/**\n * Encode a call to a user's proxy contract\n * @param address The address for the proxy to call\n * @param howToCall How to call the addres\n * @param calldata The data to use in the call\n * @param shouldAssert Whether to assert success in the proxy call\n */\nfunction encodeProxyCall(address, howToCall, calldata, shouldAssert) {\n    if (shouldAssert === void 0) { shouldAssert = true; }\n    var abi = shouldAssert ? Proxy_1.proxyAssertABI : Proxy_1.proxyABI;\n    return exports.encodeCall(abi, [address, howToCall, Buffer.from(calldata.slice(2), 'hex')]);\n}\nexports.encodeProxyCall = encodeProxyCall;\n// Helpers for atomicizer\nfunction encodeAtomicizedCalldata(atomicizer, schemas, assets, address, side) {\n    var encoder = side === types_2.OrderSide.Sell ? exports.encodeSell : exports.encodeBuy;\n    try {\n        var transactions = assets.map(function (asset, i) {\n            var schema = schemas[i];\n            var _a = encoder(schema, asset, address), target = _a.target, calldata = _a.calldata;\n            return {\n                calldata: calldata,\n                abi: schema.functions.transfer(asset),\n                address: target,\n                value: new bignumber_js_1.BigNumber(0),\n            };\n        });\n        var atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(function (t) { return t.address; }), transactions.map(function (t) { return t.value; }), transactions.map(function (t) { return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2); }), // subtract 2 for '0x', divide by 2 for hex\n        transactions.map(function (t) { return t.calldata; }).reduce(function (x, y) { return x + y.slice(2); }));\n        var kind = side === types_2.OrderSide.Buy ? types_1.FunctionInputKind.Owner : undefined;\n        var atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(function (t) { return t.abi; }), kind);\n        if (!atomicizedCalldata || !atomicizedReplacementPattern) {\n            throw new Error(\"Invalid calldata: \" + atomicizedCalldata + \", \" + atomicizedReplacementPattern);\n        }\n        return {\n            atomicizedCalldata: atomicizedCalldata,\n            atomicizedReplacementPattern: atomicizedReplacementPattern\n        };\n    }\n    catch (error) {\n        console.error({ schemas: schemas, assets: assets, address: address, side: side });\n        throw new Error(\"Failed to construct your order: likely something strange about this type of item. OpenSea has been notified. Please contact us in Discord! Original error: \" + error);\n    }\n}\n//# sourceMappingURL=schema.js.map"]},"metadata":{},"sourceType":"script"}